#
# Check DNS servers
#

# Check whether DNS servers on anycast addresses are responding
apply Service "dns4-" for (key => value in {"VIE01" = "5.1.66.255", "MUC01" = "185.150.99.255"}) {
	import "generic-service"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}
	check_command = "dns"
	vars.dns_lookup = "anycast01.ffmuc.net"
	vars.dns_expected_answer = "5.1.66.255"

	vars.dns_server = value

	assign where host.address && host.vars.os == "Linux" && (host.vars.role in ["webserver-external", "nextgen-gateway"])
}

apply Service "dns6-" for (key => value in {"VIE01" = "2001:678:e68:f000::", "MUC01" = "2001:678:ed0:f000::"}) {
	import "generic-service"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}
	check_command = "dns"
	vars.dns_lookup = "anycast01.ffmuc.net"
	vars.dns_expected_answer = "5.1.66.255"

	vars.dns_server = value

	assign where host.vars.external_address_6 && host.vars.os == "Linux" && (host.vars.role in ["webserver-external", "nextgen-gateway"])
}


# Check whether bind is running
apply Service "named" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_critical = "1:"
	vars.procs_warning = "1:"
	vars.procs_command = "named"
	check_interval = 2m
	max_check_attempts = 3
	retry_interval = 1m

	assign where "authorative-dns" in host.vars.tags
}

# Check whether pdns recursor is running
apply Service "pdns_recursor" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_critical = "1:"
	vars.procs_warning = "1:"
	vars.procs_command = "pdns_recursor"
	check_interval = 2m
	max_check_attempts = 3
	retry_interval = 1m

	assign where "recursor" in host.vars.tags
}

# Check whether dnsdist is running
apply Service "dnsdist" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_critical = "1:"
	vars.procs_warning = "1:"
	vars.procs_command = "dnsdist"
	check_interval = 2m
	max_check_attempts = 3
	retry_interval = 1m

	assign where "dnsdist" in host.vars.tags
}

# Check whether nginx is running
apply Service "nginx" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_critical = "1:"
	vars.procs_warning = "1:"
	vars.procs_command = "nginx"
	check_interval = 2m
	max_check_attempts = 3
	retry_interval = 1m

	assign where host.vars.role == "webserver-external"
}
